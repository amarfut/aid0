@model Services.DTOs.PostDto

<a id="begin-comments"></a>
<div class="comments-wrapper">
    <input id="post-id-hidden" type="hidden" value="@Model.Id" />

    @if (User.Identity.IsAuthenticated)
    {
        <form class="pure-form">
            <input id="username-hidden" type="hidden" value="@User.Identity.Name" />
            <textarea id="comment-box" style="width: 100%" class="pure-input-1" cols="4" placeholder="Комментировать..."></textarea>
            <button data-bind="click: addComment" class="pure-button pure-input-1 pure-button">Комментировать</button>
        </form>

    }
    else
    {
        <p>
            <h5>
                <a href="#" data-bind="click: function() { $('#authorizeModal').modal('show') }">
                    <span style="color:#0026ff; text-decoration:underline;">Авторизируйтесь</span>
                </a> для участия в дискуссии
            </h5>
        </p>
    }
    <p></p>
    <!-- ko foreach: comments -->
    @*<div class="single-comment-wrapper">
            <div>
                <img width="50" src="https://storage.googleapis.com/youit/users/nophoto.jpg" style="border-radius:3px;" />
            </div>
            <div>
                <span class="username" data-bind="text: name"></span>&nbsp;
                <span class="comment-created" data-bind="text: created"></span><br />
                <div class="comment-text" data-bind="text: text"></div>
                <span data-bind="text: likes"></span> <a href="#"><i class="fas fa-thumbs-up"></i> </a>&nbsp;
                <span data-bind="text: dislikes"></span> <a href="#"><i class="fas fa-thumbs-up"></i> </a>
            </div>
        </div>*@

    <!-- /ko -->
    @if (Model.Comments.Count == 0)
    {
        <h3>Оставьте комментарий первым!</h3>
    }

    @foreach (var comment in Model.Comments)
    {
        <a id="@comment.Id"></a>
        <div class="single-comment-wrapper" id="@comment.Id-comment-wrapper">
            <div><i class="fas fa-portrait" style="font-size:64px; color:#99afbe;"></i></div>
            <div>
                <div class="username">@comment.UserName <span class="comment-created">@comment.Created</span></div>
                <div class="comment-text">@comment.Text</div>
                <span>
                    <span class="comment-likes">@comment.Likes</span>
                    <a href="#" data-bind="click: function() { setReaction('@comment.Id', '', true) }"><i class="far fa-thumbs-up"></i> </a>
                    <span class="comment-dislikes">@comment.Dislikes</span>
                    <a href="#" data-bind="click: function() { setReaction('@comment.Id', '', false) }"><i class="far fa-thumbs-down"></i> </a>

                    <a href="#" data-bind="click: function() { displayAnswerCommentBox('@comment.Id', true) }"> <b>Ответить</b></a>
                </span>
            </div>
        </div>

        <div style="margin-left:65px;">
            <div id="@comment.Id-asnwer-comment-box" class="asnwer-comment-box">
                <form class="pure-form">
                    <textarea style="width:100%;" class="pure-input-1-2"></textarea>
                    <button data-bind="click: function() { answerToComment('@comment.Id') }" class="pure-button pure-input-1 pure-button">Комментировать</button>
                    <button data-bind="click: function() { displayAnswerCommentBox('@comment.Id', false) }" class="pure-button pure-input-1 pure-button">Отмена</button>
                </form>

            </div>

            @foreach (var answer in comment.Answers)
            {
                <div class="single-comment-wrapper" id="@answer.Id-comment-wrapper">
                    <div><img class="comment-ava" src="https://storage.googleapis.com/youit/users/nophoto.jpg" /></div>
                    <div>
                        <div class="username">@answer.UserName <span class="comment-created">@answer.Created</span></div>
                        <div class="comment-text">@answer.Text</div>
                        <span>
                            <span class="comment-likes">@answer.Likes</span>
                            <a href="#" data-bind="click: function() { setReaction('@comment.Id', '@answer.Id', true) }">Like </a>
                            <span class="comment-dislikes">@answer.Dislikes</span>
                            <a href="#" data-bind="click: function() { setReaction('@comment.Id', '@answer.Id', false) }">Dislike </a>

                            <a href="#" data-bind="click: function() { displayAnswerCommentBox('@answer.Id', true) }"> <b>Ответить</b></a>
                        </span>
                    </div>
                </div>
            }
        </div>
    }
</div>

<script>
    class Comment {
        constructor(name, text) {
            this.name = name;
            this.created = 'секунду назад';
            this.text = text;
            this.likes = 0;
            this.dislikes = 0;
        }
    }

    function AppCommentModel() {
        let self = this;
        self.comments = ko.observableArray([]);
        self.answerBoxVisibe = ko.observable(false);

        self.displayAnswerCommentBox = function (commentId, isVisible) {
            $('.asnwer-comment-box').hide();
            const answerComment = $('#' + commentId + '-asnwer-comment-box');
            isVisible ? answerComment.show() : answerComment.hide();
        }

        self.setReaction = function (parentCommentId, commentId, currentReaction) {

            $.ajax({
                url: '/comment/setcommentreaction',
                type: 'POST',
                contentType: "application/json",
                data: JSON.stringify({
                    ParentCommentId: parentCommentId,
                    CommentId: commentId,
                    Liked: currentReaction
                }),
                success: (data) => {
                    $('#' + commentId + '-comment-wrapper .comment-likes').text(data.likes);
                    $('#' + commentId + '-comment-wrapper .comment-dislikes').text(data.dislikes);
                },
                error: (error) => {
                    console.log(error);
                }
            });
        }

        self.answerToComment = function (commentId) {
            const text = $('#' + commentId + '-asnwer-comment-box textarea').val();
            $.ajax({
                url: '/comment/answercomment',
                type: 'POST',
                contentType: "application/json",
                data: JSON.stringify({
                    ParentCommentId: commentId,
                    Text: text
                }),
                success: (data) => {
                    $('#' + commentId + '-asnwer-comment-box textarea').val('');
                    //self.comments.push(new Comment($('#username-hidden').val(), text));
                    $('.answer-box').hide();

                },
                error: (error) => {
                    console.log(error);
                }
            });
        }

        self.addComment = function () {
            const text = $('#comment-box').val();
            $('#comment-box').val('');
            const postId = $('#post-id-hidden').val();

            $.ajax({
                url: '/comment/addcomment',
                type: 'POST',
                contentType: "application/json",
                data: JSON.stringify({
                    Text: text,
                    PostId: postId
                }),
                success: (data) => {
                    self.comments.push(new Comment($('#username-hidden').val(), text));
                },
                error: (error) => {
                    console.log(error);
                }
            });
        }
    }

    ko.applyBindings(new AppCommentModel());

</script>



@*class ReactionResult {
        constructor(like, dislike) {
            this.like;
            this.dislike;
        }
    }


    class Context {
        constructor(state) {
            this.state = state;
        }
    }


    class ReactionState {
        do = (action) => { }
    }

    class NoneReactionState extends ReactionState {
        do = (action) => {
            if (action === 'like') {
                return new ReactionResult(1, 0);
            }
            else if (action === 'dislike') {
                return new ReactionResult(0, 1);
            }
        }
    }

    class LikedReactionState extends ReactionState {
        do = (action) => {
            if (action === 'like') {
                return new ReactionResult(-1, 0);
            }
            else if (action === 'dislike') {
                return new ReactionResult(-1, 1);
            }
        }
    }

    class DislikedReactionState extends ReactionState {
        do = (action) => {
            if (action === 'like') {
                return new ReactionResult(1, -1);
            }
            else if (action === 'dislike') {
                 return new ReactionResult(0, -1);
            }
        }
    }

    let context = new CurrentState();*@