@model Services.DTOs.PostDto
@using Web.Utils

<a id="begin-comments"></a>

<div class="comments-wrapper">
    @if (!User.Identity.IsAuthenticated)
    {
        <p>
            <h5>
                <a href="#" data-bind="click: function() { $('#authorizeModal').modal('show') }">
                    <span style="color:#0026ff; text-decoration:underline;">Авторизируйтесь</span>
                </a> для участия в дискуссии
            </h5>
        </p>
    }
    else
    {
        <h3>Комментарии</h3>
        @await Html.PartialAsync("_CommentForm")
    }

    @if (Model.Comments.Count == 0)
    {
        <h3>Оставьте комментарий первым!</h3>
    }


    @foreach (var comment in Model.Comments)
    {
        @await Html.PartialAsync("_CommentInfo", comment);

        <div style="margin-left:65px;">
            <div id="@comment.Id-asnwer-comment-box" class="asnwer-comment-box">
                @await Html.PartialAsync("_CommentForm")
            </div>

            @foreach (var answer in comment.Answers)
            {
                @await Html.PartialAsync("_CommentInfo", answer);
            }
        </div>
    }
</div>




<script>
    class Comment {
        constructor(name, text) {
            this.name = name;
            this.created = 'секунду назад';
            this.text = text;
            this.likes = 0;
            this.dislikes = 0;
        }
    }

    function AppCommentModel() {
        let self = this;
        self.comments = ko.observableArray([]);
        self.answerBoxVisibe = ko.observable(false);

        self.displayAnswerCommentBox = function (commentId, isVisible) {
            $('.asnwer-comment-box').hide();
            const answerComment = $('#' + commentId + '-asnwer-comment-box');
            isVisible ? answerComment.show() : answerComment.hide();
        }

        self.setReaction = function (parentCommentId, commentId, currentReaction) {

            $.ajax({
                url: '/comment/setcommentreaction',
                type: 'POST',
                contentType: "application/json",
                data: JSON.stringify({
                    ParentCommentId: parentCommentId,
                    CommentId: commentId,
                    Liked: currentReaction
                }),
                success: (data) => {
                    $('#' + commentId + '-comment-wrapper .comment-likes').text(data.likes);
                    $('#' + commentId + '-comment-wrapper .comment-dislikes').text(data.dislikes);
                },
                error: (error) => {
                    console.log(error);
                }
            });
        }

        self.answerToComment = function (commentId) {
            const text = $('#' + commentId + '-asnwer-comment-box textarea').val();
            $.ajax({
                url: '/comment/answercomment',
                type: 'POST',
                contentType: "application/json",
                data: JSON.stringify({
                    ParentCommentId: commentId,
                    Text: text
                }),
                success: (data) => {
                    $('#' + commentId + '-asnwer-comment-box textarea').val('');
                    //self.comments.push(new Comment($('#username-hidden').val(), text));
                    $('.answer-box').hide();

                },
                error: (error) => {
                    console.log(error);
                }
            });
        }

        self.addComment = function () {
            const text = $('#comment-box').val();
            $('#comment-box').val('');
            const postId = $('@Model.Id').val();

            $.ajax({
                url: '/comment/addcomment',
                type: 'POST',
                contentType: "application/json",
                data: JSON.stringify({
                    Text: text,
                    PostId: postId
                }),
                success: (data) => {
                    self.comments.push(new Comment($('#username-hidden').val(), text));
                },
                error: (error) => {
                    console.log(error);
                }
            });
        }
    }

    ko.applyBindings(new AppCommentModel());

</script>




@*<div class="single-comment-wrapper" id="@answer.Id-comment-wrapper">
        <div class="user-ava"><img src="@answer.UserPhoto" /></div>
        <div>
            <div class="username">@answer.UserName <span class="comment-created">@answer.Created</span></div>
            <div class="comment-text">@answer.Text</div>
            <span>
                <span class="comment-likes">@answer.Likes</span>
                <a href="#" data-bind="click: function() { setReaction('@comment.Id', '@answer.Id', true) }">Like </a>
                <span class="comment-dislikes">@answer.Dislikes</span>
                <a href="#" data-bind="click: function() { setReaction('@comment.Id', '@answer.Id', false) }">Dislike </a>
                <a href="#" data-bind="click: function() { displayAnswerCommentBox('@answer.Id', true) }"> <b>Ответить</b></a>
            </span>
        </div>
    </div>*@


<!-- ko foreach: comments -->
@*<div class="single-comment-wrapper">
        <div>
            <img width="50" src="https://storage.googleapis.com/youit/users/nophoto.jpg" style="border-radius:3px;" />
        </div>
        <div>
            <span class="username" data-bind="text: name"></span>&nbsp;
            <span class="comment-created" data-bind="text: created"></span><br />
            <div class="comment-text" data-bind="text: text"></div>
            <span data-bind="text: likes"></span> <a href="#"><i class="fas fa-thumbs-up"></i> </a>&nbsp;
            <span data-bind="text: dislikes"></span> <a href="#"><i class="fas fa-thumbs-up"></i> </a>
        </div>
    </div>*@

<!-- /ko -->
@*class ReactionResult {
        constructor(like, dislike) {
            this.like;
            this.dislike;
        }
    }


    class Context {
        constructor(state) {
            this.state = state;
        }
    }


    class ReactionState {
        do = (action) => { }
    }

    class NoneReactionState extends ReactionState {
        do = (action) => {
            if (action === 'like') {
                return new ReactionResult(1, 0);
            }
            else if (action === 'dislike') {
                return new ReactionResult(0, 1);
            }
        }
    }

    class LikedReactionState extends ReactionState {
        do = (action) => {
            if (action === 'like') {
                return new ReactionResult(-1, 0);
            }
            else if (action === 'dislike') {
                return new ReactionResult(-1, 1);
            }
        }
    }

    class DislikedReactionState extends ReactionState {
        do = (action) => {
            if (action === 'like') {
                return new ReactionResult(1, -1);
            }
            else if (action === 'dislike') {
                 return new ReactionResult(0, -1);
            }
        }
    }

    let context = new CurrentState();*@