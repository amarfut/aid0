@model IEnumerable<Services.DTOs.PostPreviewDto>


<!-- ko foreach: posts -->
    <div class="box content">
        <img style="max-width:100%" data-bind="attr: { src: imageUrl }" />
        <div class="post-button-wrapper">
            <div><i class="far fa-eye"></i> <span data-bind="text: viewsCount"></span></div>
            <a data-bind="click: $parent.showComments"> <div><i class="far fa-comment"></i> <span data-bind="text: commentsCount"></span></div></a>
            <a data-bind="click: $parent.like"><div><i class="far fa-thumbs-up"></i> <span data-bind="text: likesCount"></span></div></a>
            <a data-bind="click: $parent.dislike"><div><i class="far fa-thumbs-down"></i> <span data-bind="text: dislikesCount"></span></div></a>
    </div>
    <a data-bind="attr: { href: postUrl }">
        <h3 data-bind="text: title"></h3>
    </a>
</div>
<!-- /ko -->

<div class="box more-posts-button">
    <a href="#" data-bind="click: addPosts, visible: morePostsButtonVisible"><u>загрузить больше постов</u></a>
    <h3 data-bind="visible: endPostsTextVisible">Извините, посты закончились</h3>
</div>

<script>

    class Post {
        constructor(id, title, postUrl, viewsCount, commentsCount, likesCount, dislikesCount) {
            this.id = id;
            this.title = title;
            this.viewsCount = viewsCount > 1000 ? Math.floor(viewsCount / 1000) + 'k' : viewsCount;
            this.commentsCount = commentsCount;
            this.likesCount = ko.observable(likesCount);
            this.dislikesCount = ko.observable(dislikesCount);
            this.imageUrl = 'https://storage.cloud.google.com/youit/' + postUrl + '/thumbnail.png';
            this.postUrl = '/home/post?url=' + postUrl;
        }
    }

    function AppViewModel() {
        let self = this;
        self.posts = ko.observableArray([]);
        self.morePostsButtonVisible = ko.observable(true);
        self.endPostsTextVisible = ko.observable(false);

        self.like = function (post) {
            self.setReaction(post.id, true);
        }

        self.dislike = function (post) {
            self.setReaction(post.id, false);
        }

        self.showComments = function (post) {
            window.location.replace(post.postUrl + '#begin-comments');
        }

        self.setReaction = function (postId, liked) {
            $.ajax({
                url: '/home/setpostreaction',
                type: 'POST',
                contentType: "application/json",
                data: JSON.stringify({ PostId: postId, Liked: liked }),
                success: (data) => {
                    const post = self.posts().find(p => p.id === postId);
                    post.likesCount(data.likes);
                    post.dislikesCount(data.dislikes);
                },
                error: (error) => {
                    if (error.status === 403) {
                        $('#authorizeModal').modal("show");
                    }
                }
            });
        }

        self.addPosts = function () {
            let skip = self.posts().length;
            $.get('/home/loadposts?skip=' + skip, function (posts) {
                if (!posts || posts.length === 0) {
                    self.morePostsButtonVisible(false);
                    self.endPostsTextVisible(true);
                    return;
                }

                for (let post of posts) {
                    self.posts.push(new Post(post.id, post.title, post.url, post.viewsCount, post.commentsCount, post.likesCount, post.dislikesCount));
                }
            });
        };

        self.addPosts();
    }
    ko.applyBindings(new AppViewModel());
</script>


